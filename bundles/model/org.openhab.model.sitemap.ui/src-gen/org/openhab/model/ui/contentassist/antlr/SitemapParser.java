/*
* generated by Xtext
*/
package org.openhab.model.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.openhab.model.services.SitemapGrammarAccess;

public class SitemapParser extends AbstractContentAssistParser {
	
	@Inject
	private SitemapGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.openhab.model.ui.contentassist.antlr.internal.InternalSitemapParser createParser() {
		org.openhab.model.ui.contentassist.antlr.internal.InternalSitemapParser result = new org.openhab.model.ui.contentassist.antlr.internal.InternalSitemapParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getWidgetAccess().getAlternatives_0(), "rule__Widget__Alternatives_0");
					put(grammarAccess.getWidgetAccess().getLabelAlternatives_1_1_0(), "rule__Widget__LabelAlternatives_1_1_0");
					put(grammarAccess.getWidgetAccess().getIconAlternatives_2_1_0(), "rule__Widget__IconAlternatives_2_1_0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getSitemapAccess().getGroup(), "rule__Sitemap__Group__0");
					put(grammarAccess.getSitemapAccess().getGroup_1(), "rule__Sitemap__Group_1__0");
					put(grammarAccess.getSitemapAccess().getGroup_2(), "rule__Sitemap__Group_2__0");
					put(grammarAccess.getWidgetAccess().getGroup(), "rule__Widget__Group__0");
					put(grammarAccess.getWidgetAccess().getGroup_1(), "rule__Widget__Group_1__0");
					put(grammarAccess.getWidgetAccess().getGroup_2(), "rule__Widget__Group_2__0");
					put(grammarAccess.getWidgetAccess().getGroup_3(), "rule__Widget__Group_3__0");
					put(grammarAccess.getFrameAccess().getGroup(), "rule__Frame__Group__0");
					put(grammarAccess.getTextAccess().getGroup(), "rule__Text__Group__0");
					put(grammarAccess.getTextAccess().getGroup_1(), "rule__Text__Group_1__0");
					put(grammarAccess.getGroupAccess().getGroup(), "rule__Group__Group__0");
					put(grammarAccess.getGroupAccess().getGroup_1(), "rule__Group__Group_1__0");
					put(grammarAccess.getImageAccess().getGroup(), "rule__Image__Group__0");
					put(grammarAccess.getImageAccess().getGroup_1(), "rule__Image__Group_1__0");
					put(grammarAccess.getImageAccess().getGroup_2(), "rule__Image__Group_2__0");
					put(grammarAccess.getSwitchAccess().getGroup(), "rule__Switch__Group__0");
					put(grammarAccess.getSwitchAccess().getGroup_1(), "rule__Switch__Group_1__0");
					put(grammarAccess.getSwitchAccess().getGroup_2(), "rule__Switch__Group_2__0");
					put(grammarAccess.getSitemapAccess().getNameAssignment_0(), "rule__Sitemap__NameAssignment_0");
					put(grammarAccess.getSitemapAccess().getLabelAssignment_1_1(), "rule__Sitemap__LabelAssignment_1_1");
					put(grammarAccess.getSitemapAccess().getIconAssignment_2_1(), "rule__Sitemap__IconAssignment_2_1");
					put(grammarAccess.getSitemapAccess().getChildrenAssignment_4(), "rule__Sitemap__ChildrenAssignment_4");
					put(grammarAccess.getWidgetAccess().getLabelAssignment_1_1(), "rule__Widget__LabelAssignment_1_1");
					put(grammarAccess.getWidgetAccess().getIconAssignment_2_1(), "rule__Widget__IconAssignment_2_1");
					put(grammarAccess.getWidgetAccess().getChildrenAssignment_3_1(), "rule__Widget__ChildrenAssignment_3_1");
					put(grammarAccess.getTextAccess().getItemAssignment_1_1(), "rule__Text__ItemAssignment_1_1");
					put(grammarAccess.getGroupAccess().getItemAssignment_1_1(), "rule__Group__ItemAssignment_1_1");
					put(grammarAccess.getImageAccess().getItemAssignment_1_1(), "rule__Image__ItemAssignment_1_1");
					put(grammarAccess.getImageAccess().getUrlAssignment_2_1(), "rule__Image__UrlAssignment_2_1");
					put(grammarAccess.getSwitchAccess().getItemAssignment_1_1(), "rule__Switch__ItemAssignment_1_1");
					put(grammarAccess.getSwitchAccess().getButtonLabelsAssignment_2_1(), "rule__Switch__ButtonLabelsAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.openhab.model.ui.contentassist.antlr.internal.InternalSitemapParser typedParser = (org.openhab.model.ui.contentassist.antlr.internal.InternalSitemapParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SitemapGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SitemapGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
