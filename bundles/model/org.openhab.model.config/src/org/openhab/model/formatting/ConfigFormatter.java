/*
 * generated by Xtext
 */
package org.openhab.model.formatting;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class ConfigFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		org.openhab.model.services.ConfigGrammarAccess f = (org.openhab.model.services.ConfigGrammarAccess) getGrammarAccess();

		c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());

		c.setLinewrap().after(f.getNormalItemRule());
		c.setLinewrap().after(f.getGroupItemRule());
		
		c.setNoSpace().after(f.getNormalItemAccess().getLeftParenthesisKeyword_4_0());
		c.setNoSpace().before(f.getNormalItemAccess().getRightParenthesisKeyword_4_3());
		c.setNoSpace().after(f.getGroupItemAccess().getLeftParenthesisKeyword_4_0());
		c.setNoSpace().before(f.getGroupItemAccess().getRightParenthesisKeyword_4_3());

		for (Keyword comma : f.findKeywords(",")) {
			c.setNoSpace().before(comma);
		}

		for (Keyword eq : f.findKeywords("=")) {
			c.setNoSpace().before(eq);
			c.setNoSpace().after(eq);
		}
	}
}
